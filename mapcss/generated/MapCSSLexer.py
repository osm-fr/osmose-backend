# Generated from MapCSS.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,438,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,171,8,14,1,15,1,
        15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,
        20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,
        29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
        38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
        43,3,43,266,8,43,1,44,1,44,3,44,270,8,44,1,45,1,45,3,45,274,8,45,
        1,45,1,45,1,45,5,45,279,8,45,10,45,12,45,282,9,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,54,5,54,307,8,54,10,54,12,54,310,
        9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,5,55,319,8,55,10,55,12,55,
        322,9,55,1,55,1,55,1,56,4,56,327,8,56,11,56,12,56,328,1,57,1,57,
        1,57,1,58,4,58,335,8,58,11,58,12,58,336,1,58,5,58,340,8,58,10,58,
        12,58,343,9,58,1,58,1,58,4,58,347,8,58,11,58,12,58,348,3,58,351,
        8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,4,60,361,8,60,11,60,
        12,60,362,1,60,4,60,366,8,60,11,60,12,60,367,1,60,1,60,4,60,372,
        8,60,11,60,12,60,373,3,60,376,8,60,3,60,378,8,60,3,60,380,8,60,1,
        61,1,61,1,61,1,62,1,62,1,62,3,62,388,8,62,1,63,1,63,1,63,3,63,393,
        8,63,1,64,1,64,1,64,5,64,398,8,64,10,64,12,64,401,9,64,1,64,1,64,
        1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,5,66,413,8,66,10,66,12,66,
        416,9,66,1,66,3,66,419,8,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,
        67,5,67,429,8,67,10,67,12,67,432,9,67,1,67,1,67,1,67,1,67,1,67,2,
        414,430,0,68,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,
        10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,
        21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,
        32,69,33,71,34,73,35,75,36,77,37,79,38,81,0,83,0,85,0,87,0,89,0,
        91,39,93,40,95,41,97,42,99,43,101,44,103,45,105,0,107,0,109,46,111,
        47,113,48,115,49,117,50,119,51,121,52,123,0,125,0,127,0,129,53,131,
        54,133,55,135,56,1,0,23,2,0,83,83,115,115,2,0,69,69,101,101,2,0,
        84,84,116,116,2,0,73,73,105,105,2,0,77,77,109,109,2,0,80,80,112,
        112,2,0,79,79,111,111,2,0,82,82,114,114,2,0,85,85,117,117,2,0,78,
        78,110,110,2,0,65,65,97,97,2,0,68,68,100,100,2,0,65,90,97,122,1,
        0,0,159,3,0,65,90,95,95,97,122,4,0,45,45,65,90,95,95,97,122,2,0,
        45,45,95,95,4,0,32,33,35,91,93,126,176,176,4,0,32,38,40,91,93,126,
        176,176,1,0,48,57,4,0,32,41,43,46,48,126,176,176,3,0,32,46,48,126,
        176,176,3,0,9,10,12,13,32,32,459,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
        0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,137,1,
        0,0,0,3,140,1,0,0,0,5,142,1,0,0,0,7,144,1,0,0,0,9,146,1,0,0,0,11,
        149,1,0,0,0,13,151,1,0,0,0,15,153,1,0,0,0,17,155,1,0,0,0,19,157,
        1,0,0,0,21,159,1,0,0,0,23,161,1,0,0,0,25,163,1,0,0,0,27,165,1,0,
        0,0,29,170,1,0,0,0,31,172,1,0,0,0,33,175,1,0,0,0,35,178,1,0,0,0,
        37,181,1,0,0,0,39,183,1,0,0,0,41,185,1,0,0,0,43,188,1,0,0,0,45,191,
        1,0,0,0,47,194,1,0,0,0,49,197,1,0,0,0,51,200,1,0,0,0,53,203,1,0,
        0,0,55,206,1,0,0,0,57,209,1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,
        63,215,1,0,0,0,65,217,1,0,0,0,67,219,1,0,0,0,69,221,1,0,0,0,71,225,
        1,0,0,0,73,233,1,0,0,0,75,243,1,0,0,0,77,248,1,0,0,0,79,253,1,0,
        0,0,81,257,1,0,0,0,83,259,1,0,0,0,85,261,1,0,0,0,87,265,1,0,0,0,
        89,269,1,0,0,0,91,273,1,0,0,0,93,283,1,0,0,0,95,285,1,0,0,0,97,287,
        1,0,0,0,99,289,1,0,0,0,101,291,1,0,0,0,103,293,1,0,0,0,105,295,1,
        0,0,0,107,298,1,0,0,0,109,301,1,0,0,0,111,313,1,0,0,0,113,326,1,
        0,0,0,115,330,1,0,0,0,117,350,1,0,0,0,119,352,1,0,0,0,121,355,1,
        0,0,0,123,381,1,0,0,0,125,387,1,0,0,0,127,392,1,0,0,0,129,394,1,
        0,0,0,131,404,1,0,0,0,133,408,1,0,0,0,135,424,1,0,0,0,137,138,5,
        92,0,0,138,139,5,92,0,0,139,2,1,0,0,0,140,141,2,128,65533,0,141,
        4,1,0,0,0,142,143,5,44,0,0,143,6,1,0,0,0,144,145,5,63,0,0,145,8,
        1,0,0,0,146,147,5,63,0,0,147,148,5,33,0,0,148,10,1,0,0,0,149,150,
        5,8712,0,0,150,12,1,0,0,0,151,152,5,10697,0,0,152,14,1,0,0,0,153,
        154,5,8838,0,0,154,16,1,0,0,0,155,156,5,8839,0,0,156,18,1,0,0,0,
        157,158,5,8840,0,0,158,20,1,0,0,0,159,160,5,8841,0,0,160,22,1,0,
        0,0,161,162,5,40,0,0,162,24,1,0,0,0,163,164,5,41,0,0,164,26,1,0,
        0,0,165,166,5,46,0,0,166,28,1,0,0,0,167,171,5,61,0,0,168,169,5,61,
        0,0,169,171,5,61,0,0,170,167,1,0,0,0,170,168,1,0,0,0,171,30,1,0,
        0,0,172,173,5,33,0,0,173,174,5,61,0,0,174,32,1,0,0,0,175,176,5,60,
        0,0,176,177,5,61,0,0,177,34,1,0,0,0,178,179,5,62,0,0,179,180,5,61,
        0,0,180,36,1,0,0,0,181,182,5,60,0,0,182,38,1,0,0,0,183,184,5,62,
        0,0,184,40,1,0,0,0,185,186,5,61,0,0,186,187,5,126,0,0,187,42,1,0,
        0,0,188,189,5,33,0,0,189,190,5,126,0,0,190,44,1,0,0,0,191,192,5,
        94,0,0,192,193,5,61,0,0,193,46,1,0,0,0,194,195,5,36,0,0,195,196,
        5,61,0,0,196,48,1,0,0,0,197,198,5,42,0,0,198,199,5,61,0,0,199,50,
        1,0,0,0,200,201,5,126,0,0,201,202,5,61,0,0,202,52,1,0,0,0,203,204,
        5,124,0,0,204,205,5,124,0,0,205,54,1,0,0,0,206,207,5,38,0,0,207,
        208,5,38,0,0,208,56,1,0,0,0,209,210,5,42,0,0,210,58,1,0,0,0,211,
        212,5,47,0,0,212,60,1,0,0,0,213,214,5,37,0,0,214,62,1,0,0,0,215,
        216,5,43,0,0,216,64,1,0,0,0,217,218,5,45,0,0,218,66,1,0,0,0,219,
        220,5,33,0,0,220,68,1,0,0,0,221,222,7,0,0,0,222,223,7,1,0,0,223,
        224,7,2,0,0,224,70,1,0,0,0,225,226,5,64,0,0,226,227,7,3,0,0,227,
        228,7,4,0,0,228,229,7,5,0,0,229,230,7,6,0,0,230,231,7,7,0,0,231,
        232,7,2,0,0,232,72,1,0,0,0,233,234,5,64,0,0,234,235,7,0,0,0,235,
        236,7,8,0,0,236,237,7,5,0,0,237,238,7,5,0,0,238,239,7,6,0,0,239,
        240,7,7,0,0,240,241,7,2,0,0,241,242,7,0,0,0,242,74,1,0,0,0,243,244,
        7,9,0,0,244,245,7,6,0,0,245,246,7,2,0,0,246,247,3,131,65,0,247,76,
        1,0,0,0,248,249,7,10,0,0,249,250,7,9,0,0,250,251,7,11,0,0,251,252,
        3,131,65,0,252,78,1,0,0,0,253,254,7,6,0,0,254,255,7,7,0,0,255,256,
        3,131,65,0,256,80,1,0,0,0,257,258,2,48,57,0,258,82,1,0,0,0,259,260,
        7,12,0,0,260,84,1,0,0,0,261,262,8,13,0,0,262,86,1,0,0,0,263,266,
        7,14,0,0,264,266,3,85,42,0,265,263,1,0,0,0,265,264,1,0,0,0,266,88,
        1,0,0,0,267,270,7,15,0,0,268,270,3,85,42,0,269,267,1,0,0,0,269,268,
        1,0,0,0,270,90,1,0,0,0,271,274,3,83,41,0,272,274,5,95,0,0,273,271,
        1,0,0,0,273,272,1,0,0,0,274,280,1,0,0,0,275,279,3,83,41,0,276,279,
        3,81,40,0,277,279,7,16,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,
        1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,92,1,
        0,0,0,282,280,1,0,0,0,283,284,5,91,0,0,284,94,1,0,0,0,285,286,5,
        93,0,0,286,96,1,0,0,0,287,288,5,123,0,0,288,98,1,0,0,0,289,290,5,
        125,0,0,290,100,1,0,0,0,291,292,5,58,0,0,292,102,1,0,0,0,293,294,
        5,59,0,0,294,104,1,0,0,0,295,296,5,92,0,0,296,297,5,34,0,0,297,106,
        1,0,0,0,298,299,5,92,0,0,299,300,5,39,0,0,300,108,1,0,0,0,301,308,
        5,34,0,0,302,307,7,17,0,0,303,307,3,3,1,0,304,307,3,105,52,0,305,
        307,3,1,0,0,306,302,1,0,0,0,306,303,1,0,0,0,306,304,1,0,0,0,306,
        305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
        311,1,0,0,0,310,308,1,0,0,0,311,312,5,34,0,0,312,110,1,0,0,0,313,
        320,5,39,0,0,314,319,7,18,0,0,315,319,3,3,1,0,316,319,3,107,53,0,
        317,319,3,1,0,0,318,314,1,0,0,0,318,315,1,0,0,0,318,316,1,0,0,0,
        318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,
        321,323,1,0,0,0,322,320,1,0,0,0,323,324,5,39,0,0,324,112,1,0,0,0,
        325,327,7,19,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,
        328,329,1,0,0,0,329,114,1,0,0,0,330,331,5,45,0,0,331,332,3,113,56,
        0,332,116,1,0,0,0,333,335,7,19,0,0,334,333,1,0,0,0,335,336,1,0,0,
        0,336,334,1,0,0,0,336,337,1,0,0,0,337,351,1,0,0,0,338,340,7,19,0,
        0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,
        0,342,344,1,0,0,0,343,341,1,0,0,0,344,346,5,46,0,0,345,347,7,19,
        0,0,346,345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,
        0,0,349,351,1,0,0,0,350,334,1,0,0,0,350,341,1,0,0,0,351,118,1,0,
        0,0,352,353,5,45,0,0,353,354,3,117,58,0,354,120,1,0,0,0,355,356,
        5,124,0,0,356,357,5,122,0,0,357,379,1,0,0,0,358,360,5,45,0,0,359,
        361,3,81,40,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,380,1,0,0,0,364,366,3,81,40,0,365,364,1,0,0,0,366,
        367,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,377,1,0,0,0,369,
        375,5,45,0,0,370,372,3,81,40,0,371,370,1,0,0,0,372,373,1,0,0,0,373,
        371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,371,1,0,0,0,375,
        376,1,0,0,0,376,378,1,0,0,0,377,369,1,0,0,0,377,378,1,0,0,0,378,
        380,1,0,0,0,379,358,1,0,0,0,379,365,1,0,0,0,380,122,1,0,0,0,381,
        382,5,92,0,0,382,383,5,47,0,0,383,124,1,0,0,0,384,388,3,123,61,0,
        385,388,7,20,0,0,386,388,3,3,1,0,387,384,1,0,0,0,387,385,1,0,0,0,
        387,386,1,0,0,0,388,126,1,0,0,0,389,393,3,123,61,0,390,393,7,21,
        0,0,391,393,3,3,1,0,392,389,1,0,0,0,392,390,1,0,0,0,392,391,1,0,
        0,0,393,128,1,0,0,0,394,395,5,47,0,0,395,399,3,125,62,0,396,398,
        3,127,63,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,
        1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,47,0,0,403,130,
        1,0,0,0,404,405,7,22,0,0,405,406,1,0,0,0,406,407,6,65,0,0,407,132,
        1,0,0,0,408,409,5,47,0,0,409,410,5,47,0,0,410,414,1,0,0,0,411,413,
        9,0,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,415,1,0,0,0,414,412,
        1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,417,419,5,13,0,0,418,417,
        1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,5,10,0,0,421,422,
        1,0,0,0,422,423,6,66,0,0,423,134,1,0,0,0,424,425,5,47,0,0,425,426,
        5,42,0,0,426,430,1,0,0,0,427,429,9,0,0,0,428,427,1,0,0,0,429,432,
        1,0,0,0,430,431,1,0,0,0,430,428,1,0,0,0,431,433,1,0,0,0,432,430,
        1,0,0,0,433,434,5,42,0,0,434,435,5,47,0,0,435,436,1,0,0,0,436,437,
        6,67,0,0,437,136,1,0,0,0,28,0,170,265,269,273,278,280,306,308,318,
        320,328,336,341,348,350,362,367,373,375,377,379,387,392,399,414,
        418,430,1,0,1,0
    ]

class MapCSSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMA = 1
    QUESTION_MARK = 2
    QUESTION_MARK_NEGATED = 3
    OP_INCLUDED_IN = 4
    OP_INTERSECTS = 5
    OP_SUBSET = 6
    OP_SUPERSET = 7
    OP_NOSUBSET = 8
    OP_NOSUPERSET = 9
    PAR_OPEN = 10
    PAR_CLOSE = 11
    DOT = 12
    OP_EQ = 13
    OP_NEQ = 14
    OP_LE = 15
    OP_GE = 16
    OP_LT = 17
    OP_GT = 18
    OP_MATCH = 19
    OP_NOT_MATCH = 20
    OP_STARTS_WITH = 21
    OP_ENDS_WITH = 22
    OP_SUBSTRING = 23
    OP_CONTAINS = 24
    OP_OR = 25
    OP_AND = 26
    OP_MUL = 27
    OP_DIV = 28
    OP_MOD = 29
    OP_PLUS = 30
    OP_MINUS = 31
    OP_NOT = 32
    SET = 33
    IMPORT = 34
    SUPPORTS = 35
    SUPPORTS_NOT = 36
    SUPPORTS_AND = 37
    SUPPORTS_OR = 38
    NCOMPONENT = 39
    LBRACKET = 40
    RBRACKET = 41
    LBRACE = 42
    RBRACE = 43
    COLON = 44
    SEMICOLON = 45
    DQUOTED_STRING = 46
    SQUOTED_STRING = 47
    POSITIVE_INT = 48
    NEGATIVE_INT = 49
    POSITIVE_FLOAT = 50
    NEGATIVE_FLOAT = 51
    RANGE = 52
    REGEXP = 53
    WS = 54
    SL_COMMENT = 55
    ML_COMMENT = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'?'", "'?!'", "'\\u2208'", "'\\u29C9'", "'\\u2286'", 
            "'\\u2287'", "'\\u2288'", "'\\u2289'", "'('", "')'", "'.'", 
            "'!='", "'<='", "'>='", "'<'", "'>'", "'=~'", "'!~'", "'^='", 
            "'$='", "'*='", "'~='", "'||'", "'&&'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'!'", "'['", "']'", "'{'", "'}'", "':'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "QUESTION_MARK", "QUESTION_MARK_NEGATED", "OP_INCLUDED_IN", 
            "OP_INTERSECTS", "OP_SUBSET", "OP_SUPERSET", "OP_NOSUBSET", 
            "OP_NOSUPERSET", "PAR_OPEN", "PAR_CLOSE", "DOT", "OP_EQ", "OP_NEQ", 
            "OP_LE", "OP_GE", "OP_LT", "OP_GT", "OP_MATCH", "OP_NOT_MATCH", 
            "OP_STARTS_WITH", "OP_ENDS_WITH", "OP_SUBSTRING", "OP_CONTAINS", 
            "OP_OR", "OP_AND", "OP_MUL", "OP_DIV", "OP_MOD", "OP_PLUS", 
            "OP_MINUS", "OP_NOT", "SET", "IMPORT", "SUPPORTS", "SUPPORTS_NOT", 
            "SUPPORTS_AND", "SUPPORTS_OR", "NCOMPONENT", "LBRACKET", "RBRACKET", 
            "LBRACE", "RBRACE", "COLON", "SEMICOLON", "DQUOTED_STRING", 
            "SQUOTED_STRING", "POSITIVE_INT", "NEGATIVE_INT", "POSITIVE_FLOAT", 
            "NEGATIVE_FLOAT", "RANGE", "REGEXP", "WS", "SL_COMMENT", "ML_COMMENT" ]

    ruleNames = [ "EBACKSLASH", "UNICODE", "COMMA", "QUESTION_MARK", "QUESTION_MARK_NEGATED", 
                  "OP_INCLUDED_IN", "OP_INTERSECTS", "OP_SUBSET", "OP_SUPERSET", 
                  "OP_NOSUBSET", "OP_NOSUPERSET", "PAR_OPEN", "PAR_CLOSE", 
                  "DOT", "OP_EQ", "OP_NEQ", "OP_LE", "OP_GE", "OP_LT", "OP_GT", 
                  "OP_MATCH", "OP_NOT_MATCH", "OP_STARTS_WITH", "OP_ENDS_WITH", 
                  "OP_SUBSTRING", "OP_CONTAINS", "OP_OR", "OP_AND", "OP_MUL", 
                  "OP_DIV", "OP_MOD", "OP_PLUS", "OP_MINUS", "OP_NOT", "SET", 
                  "IMPORT", "SUPPORTS", "SUPPORTS_NOT", "SUPPORTS_AND", 
                  "SUPPORTS_OR", "DIGIT", "CHAR", "NONASCII", "NMSTART", 
                  "NMCHAR", "NCOMPONENT", "LBRACKET", "RBRACKET", "LBRACE", 
                  "RBRACE", "COLON", "SEMICOLON", "EDQUOTE", "ESQUOTE", 
                  "DQUOTED_STRING", "SQUOTED_STRING", "POSITIVE_INT", "NEGATIVE_INT", 
                  "POSITIVE_FLOAT", "NEGATIVE_FLOAT", "RANGE", "REGEX_ESCAPE", 
                  "REGEX_START", "REGEX_CHAR", "REGEXP", "WS", "SL_COMMENT", 
                  "ML_COMMENT" ]

    grammarFileName = "MapCSS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


