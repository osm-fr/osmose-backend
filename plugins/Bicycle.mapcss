meta {
    title: "Bike validation ruleset";
    description: "Some validation for bike facilities";
    author: "geovelo";
    baselanguage: "en";
}
meta[lang=en] { /* lang=en, unused, only to use tr() to catch string for translation */
    description: tr("Some validation for bike facilities");
}
meta[lang=fr] {
    description: "Règle de validation pour les aménagements cyclables";
}

way[busway=~/lane|opposite_lane/][!cycleway],
way[highway=service][psv=yes][access=no][!bicycle],
way[highway=service][psv=yes][motor_vehicle=no][!bicycle] {
    throwOther: tr("Missing bicycle access in a busway: bicycle=yes|no");
}

way[cycleway][cycleway:right][cycleway:left] {
    throwWarning: tr("{0} with {1} and {2}", "{0.key}", "{1.key}", "{2.key}");
    osmoseItemClassLevel: "4030/40301/2";
    osmoseTags: list("tag", "highway", "cycleway");

    assertMatch: "way cycleway=a cycleway:right=b cycleway:left=c";
}

way[footway=sidewalk][highway!~/footway|construction/] {
    throwWarning: tr("{0} without {1}", "{0.tag}", "{1.tag}");
    osmoseItemClassLevel: "2080/20805/3";
    osmoseTags: list("tag", "highway", "footway");

    assertMatch: "way footway=sidewalk highway=path";
    assertNoMatch: "way footway=sidewalk highway=footway";
    assertNoMatch: "way footway=sidewalk highway=construction construction=footway";
}

way[highway=service][service=psv][psv!=yes] {
    throwWarning: tr("{0} is preferred to {1}", "{2.tag}", "{1.tag}");
    osmoseItemClassLevel: "4010/40101/2";
    osmoseTags: list("tag", "highway");
    fixRemove: "service";
    fixAdd: "psv=yes";

    assertMatch: "way highway=service service=psv psv=no";
    assertNoMatch: "way highway=service service=psv psv=yes";
}

way[highway=cycleway][cycleway=track] {
    throwWarning: tr("{0} with {1}", "{0.tag}", "{1.tag}");
    osmoseItemClassLevel: "3032/30328/2";
    osmoseTags: list("tag", "highway", "cycleway");
    fixRemove: "cycleway";
}

way[cycleway=~/opposite|opposite_lane/][!oneway],
way[cycleway=~/opposite|opposite_lane/][oneway=no] {
    throwError: tr("Opposite cycleway without oneway");
    osmoseItemClassLevel: "2030/20301/1";
    osmoseTags: list("tag", "highway", "cycleway", "fix:survey");

    assertMatch: "way cycleway=opposite";
    assertNoMatch: "way cycleway=opposite oneway=yes";
    assertNoMatch: "way cycleway=lane oneway=yes";
}

way["cycleway:right"=~/opposite|opposite_lane/][oneway=yes],
way["cycleway:left"=~/opposite|opposite_lane/][oneway="-1"] {
    throwError: tr("Opposite or opposite lane in the same way of the oneway");
    osmoseItemClassLevel: "2030/20302/1";
    osmoseTags: list("tag", "highway", "cycleway", "fix:survey");

    assertMatch: "way cycleway:right=opposite oneway=yes";
    assertNoMatch: "way cycleway=opposite oneway=yes";
}
