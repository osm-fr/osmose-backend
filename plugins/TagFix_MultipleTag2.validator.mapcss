/*#########################################################################
##                                                                       ##
## Copyrights Osmose project 2023                                        ##
##                                                                       ##
## This program is free software: you can redistribute it and/or modify  ##
## it under the terms of the GNU General Public License as published by  ##
## the Free Software Foundation, either version 3 of the License, or     ##
## (at your option) any later version.                                   ##
##                                                                       ##
## This program is distributed in the hope that it will be useful,       ##
## but WITHOUT ANY WARRANTY; without even the implied warranty of        ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         ##
## GNU General Public License for more details.                          ##
##                                                                       ##
## You should have received a copy of the GNU General Public License     ##
## along with this program.  If not, see <http://www.gnu.org/licenses/>. ##
##                                                                       ##
#########################################################################*/

meta {
    title: "Osmose-QA â€“ Tag combinations";
    description: "Validation of combinations of tags";
    author: "Osmose";
    min-josm-version: 14481;
    -osmoseTags: list("tag");
}
meta[lang=en] { /* lang=en, unused, only to use tr() to catch string for translation */
    description: tr("Validation of combinations of tags");
}


/* Amenities are not typically not located on/in a roof, but underneath */
*[building=roof][amenity][amenity!=shelter][parking!=rooftop] {
    throwWarning: tr("{0} together with {1}, usually {1} is located underneath the {2}. Tag the {3} as a separate object.", "{0.tag}", "{1.tag}", "{0.value}", "{1.key}");
    assertMatch: "way building=roof amenity=fuel";
    assertNoMatch: "way building=roof amenity=parking parking=rooftop";
    -osmoseItemClassLevel: "3032/30322/3";
}


*[highway=emergency_access_point][!ref] {
    throwWarning: tr("Missing tag ref for emergency access point");
    -osmoseItemClassLevel: "2080/20802:1/2";
    -osmoseTags: list("highway");
}


*[amenity=recycling][recycling_type!=centre][recycling:glass=yes][outside("CZ")] {
    throwWarning: tr("Probably only for bottles, not any type of glass");
    fixAdd: "recycling:glass_bottles=yes";
    fixRemove: "recycling:glass";
    -osmoseItemClassLevel: "3230/32301/2";
    -osmoseTags: list("fix:chair");
    -osmoseAssertMatchWithContext: list("node amenity=recycling recycling_type=container recycling:glass=yes", "inside=FR");
    -osmoseAssertNoMatchWithContext: list("node amenity=recycling recycling_type=container recycling:glass=yes", "inside=CZ");
    -osmoseResource: "https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling";
    -osmoseDetail: tr("Most street-side glass containers only accept soda-lime glass (e.g. bottles and jars), but not glasses for high temperatures or window glass.");
}


*[amenity=recycling][recycling_type!=centre][name] {
    /* Note: duplicate of JOSM rule */
    throwWarning: tr("Suspicious name for a container");
    assertMatch: "node amenity=recycling recycling_type=container name=\"My nice awesome container\"";
    -osmoseItemClassLevel: "3230/32302/2";
    -osmoseTags: list("fix:chair");
}


way[highway][fee][!amenity][!leisure][highway!=trailhead] {
    throwWarning: tr("Use tag \"toll\" instead of \"fee\"");
    group: tr("Watch multiple tags");
    assertMatch: "way highway=primary fee=yes";
    assertNoMatch: "way highway=service fee=yes amenity=weighbridge";
    fixChangeKey: "fee=>toll";
    -osmoseItemClassLevel: "3032/30320:1000/1";
    -osmoseTags: list("fix:chair", "highway");
}


way[highway][junction=roundabout][area][area!=no] {
    /* Note: partial duplicate of JOSM rule */
    throwWarning: tr("Roundabout as area");
    assertMatch: "way area=yes highway=secondary junction=roundabout";
    fixRemove: "area";
    -osmoseItemClassLevel: "4020/40201:0/1";
    -osmoseTags: list("fix:chair", "highway", "roundabout");
}


way[junction][junction!=yes][!highway][!area:highway] {
    throwWarning: tr("Tag highway missing on junction");
    assertMatch: "way junction=roundabout waterway=river";
    assertNoMatch: "way junction=yes";
    assertNoMatch: "way junction=roundabout highway=service";
    -osmoseItemClassLevel: "2080/20800:0/1";
    -osmoseTags: list("highway", "roundabout", "fix:chair");
    -osmoseDetail: tr("The way has a tag `junction=*` but without `highway=*`.");
    -osmoseTrap: tr("Check if it is really a highway and it is not already mapped.");
}


way[oneway][!highway][!railway][!aerialway][!waterway][!aeroway][!piste:type][!area:highway][attraction!=summer_toboggan][leisure!=track] {
    /* Largely overlapping with a JOSM rule */
    throwWarning: tr("Tag highway missing on oneway");
    assertMatch: "way oneway=yes building=yes";
    assertNoMatch: "way highway=x cycleway=opposite oneway=yes";
    -osmoseItemClassLevel: "2080/20801:0/1";
    -osmoseTags: list("highway", "fix:chair");
    -osmoseDetail: tr("The way has a tag `oneway=*` but without `highway=*`.");
    -osmoseTrap: tr("Check if it is really a highway and it is not already mapped.");
}


way[waterway][level] {
    throwWarning: tr("Waterway with `level`");
    assertMatch: "way waterway=stream level=-1";
    fixChangeKey: "level=>layer";
    -osmoseItemClassLevel: "3032/30327:0/2";
    -osmoseTags: list("fix:chair");
    -osmoseDetail: tr("The tag `level` should be used for buildings, shops, amenities, etc.");
    -osmoseTrap: tr("Remove `level` and check if `layer` is needed instead.");
}


way[tunnel ][highway=~/^(motorway_link|trunk_link|primary|primary_link|secondary|secondary_link)$/][!maxheight][!maxheight:physical][tunnel!=no],
way[covered][highway=~/^(motorway_link|trunk_link|primary|primary_link|secondary|secondary_link)$/][!maxheight][!maxheight:physical][covered!=no] {
    throwWarning: tr("Missing maxheight tag");
    assertMatch: "way highway=primary tunnel=yes";
    assertMatch: "way highway=primary covered=yes";
    assertNoMatch: "way highway=primary tunnel=yes maxheight=2.4";
    assertNoMatch: "way highway=primary covered=no";
    -osmoseItemClassLevel: "7130/71301:0/3";
    -osmoseTags: list("highway", "maxheight", "fix:survey");
    -osmoseDetail: tr("Missing `maxheight=*` or `maxheight:physical=*` for a tunnel or a way under a bridge.");
}


relation[!type] {
    throwWarning: tr("Missing relation type");
    assertMatch: "relation";
    -osmoseItemClassLevel: "2110/21102/2";
    -osmoseDetail: tr("The relation is missing a `type` tag to define what it represents.");
}


node[natural=tree][type][type!=palm] {
    throwWarning: tr("The tag `{0}` is deprecated in favour of {1}", "{1.key}", "`leaf_type`");
    group: tr("Deprecated tag");
    -osmoseItemClassLevel: "4010/40106/3";
    -osmoseTags: list("tree", "fix:chair", "deprecated");
    /* No autofix, most remaining values are misspelled (or palm, which cannot easily be converted) */
}


*[bridge][tunnel][bridge!=no][tunnel!=no] {
  throwWarning: tr("Conflict between tags: `{0}` and `{1}`", "{0.tag}", "{1.tag}");
  group: tr("Tag conflict");
  -osmoseItemClassLevel: "4030/40303:0/1";
  -osmoseTags: list("fix:chair");
  -osmoseDetail: tr("The object contains two incompatible tags.");
  -osmoseTrap: tr("Sometimes the object needs both tags.");
  assertMatch: "way bridge=yes tunnel=yes";
  assertNoMatch: "way bridge=yes tunnel=no";
}


node[highway=crossing][crossing][crossing=~/^(no|informal)$/] {
  throwWarning: tr("Conflict between tags: `{1}` must be used without `{0}`", "{0.tag}", "{1.tag}");
  group: tr("Tag conflict");
  -osmoseItemClassLevel: "4030/40303:1/1";
  -osmoseTags: list("fix:chair");
  -osmoseDetail: tr("The object contains two incompatible tags.");
  -osmoseTrap: tr("Sometimes the object needs both tags.");
  assertMatch: "node crossing=no highway=crossing";
  assertNoMatch: "node crossing=uncontrolled highway=crossing";
  fixRemove: "{0.key}";
}


node[leisure=picnic_table][tourism=picnic_site],
area[leisure=picnic_table][tourism=picnic_site] {
  throwWarning: tr("{0} together with {1}. A picnic site rarely consists of only one single picnic table", "{0.tag}", "{1.tag}");
  group: tr("Tag conflict");
  -osmoseItemClassLevel: "4030/40303:2/1";
  -osmoseTags: list("fix:chair");
  -osmoseDetail: tr("The object contains two incompatible tags.");
  -osmoseTrap: tr("Sometimes the object needs both tags.");
}


way[attraction=roller_coaster][roller_coaster=track] {
  throwWarning: tr("{0} together with {1}. {0} should be used for the area containing the attraction, {1} for the actual tracks", "{0.tag}", "{1.tag}");
  group: tr("Tag conflict");
  -osmoseItemClassLevel: "4030/40303:3/1";
  -osmoseTags: list("fix:chair");
  -osmoseDetail: tr("The object contains two incompatible tags.");
  -osmoseTrap: tr("Sometimes the object needs both tags.");
}


*[barrier=fence][material][!fence_type] {
    throwWarning: tr("Fence with {0} tag, also add {1}", "{1.key}", "{2.key}");
    assertMatch: "node barrier=fence material=wood";
    assertNoMatch: "node barrier=fence material=metal fence_type=chain_link";
    -osmoseItemClassLevel: "3032/303210/3";
}


node[tourism=camp_site][name][name=~/^[0-9]+$/][!ref][!building],
area[tourism=camp_site][name][name=~/^[0-9]+$/][!ref][!building],
node[tourism=caravan_site][name][name=~/^[0-9]+$/][!ref][!building],
area[tourism=caravan_site][name][name=~/^[0-9]+$/][!ref][!building] {
  throwWarning: tr("{0} with {1}, likely this is a single pitch instead", "{0.tag}", "{1.tag}");
  fixAdd: "tourism=camp_pitch";
  fixChangeKey: "name=>ref";
  assertMatch: "node tourism=camp_site name=24";
  assertNoMatch: "node tourism=camp_site name=24tents";
  -osmoseItemClassLevel: "4040/40401:0/2";
  -osmoseTags: list("fix:chair", "name", "tourism");
  -osmoseDetail: tr("The camping site has a numeric name. Numeric identifiers are much more common for a single pitch (`tourism=camp_pitch`) within a camping site. Possibly the two were interchanged?");
}


*[alt_name][name][alt_name~=*name][alt_name!=*name] {
  throwWarning: tr("{0} contains the value of {1}", "{0.key}", "{1.key}");
  assertMatch: "node name=y alt_name=x;y;z";
  assertMatch: "node name=y alt_name=\"x; y; z\"";
  assertNoMatch: "node name=y alt_name=y"; /* already checked by mapcss validator rules of JOSM */
  assertNoMatch: "node name=y alt_name=xyz";
  fixAdd: concat("{0.key}=", join_list(";", trim_list(split(";", replace(concat(";", join_list(";", trim_list(split(";", tag("alt_name")))), ";"), concat(";", tag("name"), ";"), ";")))));
  -osmoseItemClassLevel: "5080/50802/3";
  -osmoseTags: list("name", "fix:chair");
  -osmoseTrap: tr("Possibly a different `alt_name` that is very similar to `name` was meant. Alternative names are often similar (but never equal) to the name.");
}


/* Workaround for issue #1766 */
node[tunnel][!highway][!area:highway][!railway][!waterway][!piste:type][type!=tunnel][public_transport!=platform][route!=ferry][man_made!=pipeline][man_made!=goods_conveyor][man_made!=wildlife_crossing][man_made!=tunnel][power!=cable] {
    throwWarning: tr("{0} on suspicious object", "{0.key}");
    group: tr("suspicious tag combination");
    -osmoseItemClassLevel: "3032/303211/3"; /* Not using 9001/9001002 as we don't know how JOSM will change its rules */
}
