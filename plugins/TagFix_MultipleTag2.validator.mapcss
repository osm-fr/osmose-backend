/*#########################################################################
##                                                                       ##
## Copyrights Osmose project 2023                                        ##
##                                                                       ##
## This program is free software: you can redistribute it and/or modify  ##
## it under the terms of the GNU General Public License as published by  ##
## the Free Software Foundation, either version 3 of the License, or     ##
## (at your option) any later version.                                   ##
##                                                                       ##
## This program is distributed in the hope that it will be useful,       ##
## but WITHOUT ANY WARRANTY; without even the implied warranty of        ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         ##
## GNU General Public License for more details.                          ##
##                                                                       ##
## You should have received a copy of the GNU General Public License     ##
## along with this program.  If not, see <http://www.gnu.org/licenses/>. ##
##                                                                       ##
#########################################################################*/

meta {
    title: "Osmose-QA â€“ Tag combinations";
    description: "Validation of combinations of tags";
    author: "Osmose";
    min-josm-version: 14481;
    -osmoseTags: list("tag");
}
meta[lang=en] { /* lang=en, unused, only to use tr() to catch string for translation */
    description: tr("Validation of combinations of tags");
}


/* Amenities are not typically not located on/in a roof, but underneath */
*[building=roof][amenity][amenity!=shelter][parking!=rooftop] {
    throwWarning: tr("{0} together with {1}, usually {1} is located underneath the {2}. Tag the {3} as a separate object.", "{0.tag}", "{1.tag}", "{0.value}", "{1.key}");
    assertMatch: "way building=roof amenity=fuel";
    assertNoMatch: "way building=roof amenity=parking parking=rooftop";
    -osmoseItemClassLevel: "3032/30322/3";
}


*[highway=emergency_access_point][!ref] {
    throwWarning: tr("Missing tag ref for emergency access point");
    -osmoseItemClassLevel: "2080/20802:1/2";
    -osmoseTags: list("highway");
}


*[amenity=recycling][recycling_type!=centre][recycling:glass=yes][outside("CZ")] {
    throwWarning: tr("Probably only for bottles, not any type of glass");
    fixAdd: "recycling:glass_bottles=yes";
    fixRemove: "recycling:glass";
    -osmoseItemClassLevel: "3230/32301/2";
    -osmoseTags: list("fix:chair");
    -osmoseAssertMatchWithContext: list("node amenity=recycling recycling_type=container recycling:glass=yes", "inside=FR");
    -osmoseAssertNoMatchWithContext: list("node amenity=recycling recycling_type=container recycling:glass=yes", "inside=CZ");
    -osmoseResource: "https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling";
    -osmoseDetail: tr("Most street-side glass containers only accept soda-lime glass (e.g. bottles and jars), but not glasses for high temperatures or window glass.");
}


*[amenity=recycling][recycling_type!=centre][name] {
    /* Note: duplicate of JOSM rule */
    throwWarning: tr("Suspicious name for a container");
    assertMatch: "node amenity=recycling recycling_type=container name=\"My nice awesome container\"";
    -osmoseItemClassLevel: "3230/32302/2";
    -osmoseTags: list("fix:chair");
}


way[highway][fee][!amenity][!leisure] {
    throwWarning: tr("Use tag \"toll\" instead of \"fee\"");
    group: tr("Watch multiple tags");
    assertMatch: "way highway=primary fee=yes";
    assertNoMatch: "way highway=service fee=yes amenity=weighbridge";
    fixChangeKey: "fee=>toll";
    -osmoseItemClassLevel: "3032/30320:1000/1";
    -osmoseTags: list("fix:chair", "highway", "tag");
}


way[highway][junction=roundabout][area][area!=no] {
    /* Note: partial duplicate of JOSM rule */
    throwWarning: tr("Roundabout as area");
    assertMatch: "way area=yes highway=secondary junction=roundabout";
    fixRemove: "area";
    -osmoseItemClassLevel: "4020/40201:0/1";
    -osmoseTags: list("fix:chair", "highway", "roundabout");
}
