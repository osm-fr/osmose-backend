/*#########################################################################
##                                                                       ##
## Copyrights Géovélo                                                    ##
##                                                                       ##
## This program is free software: you can redistribute it and/or modify  ##
## it under the terms of the GNU General Public License as published by  ##
## the Free Software Foundation, either version 3 of the License, or     ##
## (at your option) any later version.                                   ##
##                                                                       ##
## This program is distributed in the hope that it will be useful,       ##
## but WITHOUT ANY WARRANTY; without even the implied warranty of        ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         ##
## GNU General Public License for more details.                          ##
##                                                                       ##
## You should have received a copy of the GNU General Public License     ##
## along with this program.  If not, see <http://www.gnu.org/licenses/>. ##
##                                                                       ##
#########################################################################*/

meta {
    title: "Osmose-QA – Bike validation ruleset";
    description: "Some validation for bike facilities";
    author: "Géovélo";
    min-josm-version: 14481;
    -osmoseTags: list("tag", "highway");
}
meta[lang=en] { /* lang=en, unused, only to use tr() to catch string for translation */
    description: tr("Some validation for bike facilities");
}
meta[lang=fr] {
    description: "Règle de validation pour les aménagements cyclables";
}

way[busway=~/lane|opposite_lane/][!cycleway],
way[highway=service][psv=yes][access=no][!bicycle],
way[highway=service][psv=yes][motor_vehicle=no][!bicycle] {
    throwOther: tr("Missing bicycle access in a busway: bicycle=yes|no");
    -osmoseTags: list("cycleway", "fix:survey");
}

way[cycleway][cycleway:right][cycleway:left] {
    throwWarning: tr("{0} with {1} and {2}", "{0.key}", "{1.key}", "{2.key}");
    -osmoseItemClassLevel: "4030/40301/2";
    -osmoseTags: list("cycleway", "fix:chair");

    assertMatch: "way cycleway=a cycleway:right=b cycleway:left=c";
}

way[footway=sidewalk][highway!~/footway|construction/] {
    throwWarning: tr("{0} without {1}", "{0.tag}", "highway=footway|construction");
    -osmoseItemClassLevel: "2080/20805/3";
    -osmoseTags: list("footway", "fix:chair");

    assertMatch: "way footway=sidewalk highway=path";
    assertNoMatch: "way footway=sidewalk highway=footway";
    assertNoMatch: "way footway=sidewalk highway=construction construction=footway";
}

way[highway=service][service=psv][psv!=yes] {
    throwWarning: tr("{0} is preferred to {1}", "{2.tag}", "{1.tag}");
    -osmoseItemClassLevel: "4010/40101/2";
    -osmoseTags: list("fix:chair");
    fixRemove: "service";
    fixAdd: "psv=yes";

    assertMatch: "way highway=service service=psv psv=no";
    assertNoMatch: "way highway=service service=psv psv=yes";
}

way[highway=cycleway][cycleway=track] {
    throwWarning: tr("{0} with {1}", "{0.tag}", "{1.tag}");
    -osmoseItemClassLevel: "3032/30328/2";
    -osmoseTags: list("cycleway", "fix:chair");
    fixRemove: "cycleway";
}

way[cycleway=~/opposite|opposite_lane/][!oneway],
way[cycleway=~/opposite|opposite_lane/][oneway=no] {
    throwError: tr("Opposite cycleway without oneway");
    -osmoseItemClassLevel: "2030/20301/1";
    -osmoseTags: list("cycleway", "fix:survey");

    assertMatch: "way cycleway=opposite";
    assertNoMatch: "way cycleway=opposite oneway=yes";
    assertNoMatch: "way cycleway=lane oneway=yes";
}


way:righthandtraffic["cycleway:right"=~/opposite|opposite_lane/][oneway=yes],
way:righthandtraffic["cycleway:left"=~/opposite|opposite_lane/][oneway="-1"],
way!:righthandtraffic["cycleway:left"=~/opposite|opposite_lane/][oneway=yes],
way!:righthandtraffic["cycleway:right"=~/opposite|opposite_lane/][oneway="-1"] {
    throwError: tr("Opposite or opposite lane in the same way of the oneway");
    -osmoseItemClassLevel: "2030/20302/1";
    -osmoseTags: list("cycleway", "fix:survey");

    assertMatch: "way cycleway:right=opposite oneway=yes";
    assertNoMatch: "way cycleway=opposite oneway=yes";
}
